template <Bits>
implement float<Bits> {
    template <TargetType>
    func cast()->TargetType{
        return __cast<float<Bits>, TargetType>(this);
    }
}

implement operator::Equal<f32> for f32 {
    @instruction("FCmp", "FCMP_OEQ")
    func Equal(operand: f32)->bool;
}

implement operator::NotEqual<f32> for f32 {
    @instruction("FCmp", "FCMP_ONE")
    func NotEqual(operand: f32)->bool;
}

implement operator::Add<f32> for f32 {
    @instruction("BinaryOperator", "FAdd")
    func Add(operand: f32)->f32;
}

implement operator::Sub<f32> for f32 {
    @instruction("BinaryOperator", "FSub")
    func Sub(operand: f32)->f32;
}

@disable_dynamic_dispatch
implement operator::Multiply<f32> for f32 {
    @instruction("BinaryOperator", "FMul")
    func Multiply(operand: f32)->f32;
}

@disable_dynamic_dispatch
implement operator::Divide<f32> for f32 {
    @instruction("BinaryOperator", "FDiv")
    func Divide(operand: f32)->f32;
}


@disable_dynamic_dispatch
implement operator::Remaind<f32> for f32 {
    @instruction("BinaryOperator", "FRem")
    func Remaind(operand: f32)->f32;
}

@disable_dynamic_dispatch
implement operator::Greater<f32> for f32 {
    @instruction("FCmp", "FCMP_OGT")
    func Greater(operand: f32)->bool;
}

@disable_dynamic_dispatch
implement operator::Less<f32> for f32 {
    @instruction("FCmp", "FCMP_OLT")
    func Less(operand: f32)->bool;
}

@disable_dynamic_dispatch
implement operator::GreaterOrEqual<f32> for f32 {
    @instruction("FCmp", "FCMP_OGE")
    func GreaterOrEqual(operand: f32)->bool;
}

@disable_dynamic_dispatch
implement operator::LessOrEqual<f32> for f32 {
    @instruction("FCmp", "FCMP_OLE")
    func LessOrEqual(operand: f32)->bool;
}

func tmp(){
    var a0: float<32>;
    var a1: float<64>;
}


