template <Bits>
implement int<Bits> {
    template <TargetType>
    func cast()->TargetType{
        return __cast<int<Bits>, TargetType>(this);
    }
}

template <Bits>
implement uint<Bits> {
    template <TargetType>
    func cast()->TargetType{
        return __cast<uint<Bits>, TargetType>(this);
    }
}

template <Bits>
implement operator::Add<int<Bits>> for int<Bits> {
    func Add(operand: int<Bits>)->int<Bits> {
        return __add<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::Sub<int<Bits>> for int<Bits> {
    func Sub(operand: int<Bits>)->int<Bits> {
        return __sub<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::Multiply<int<Bits>> for int<Bits> {
    func Multiply(operand: int<Bits>)->int<Bits>{
        return __mul<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::Divide<int<Bits>> for int<Bits> {
    func Divide(operand: int<Bits>)->int<Bits>{
        return __div<int<Bits>>(this, operand);
    }
}


template <Bits>
implement operator::Remaind<int<Bits>> for int<Bits> {
    func Remaind(operand: int<Bits>)->int<Bits>{
        return __rem<int<Bits>>(this, operand);
    }
}


template <Bits>
implement operator::Equal<int<Bits>> for int<Bits> {
    func Equal(operand: int<Bits>)->bool {
        return __eq<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::NotEqual<int<Bits>> for int<Bits> {
    func NotEqual(operand: int<Bits>)->bool{
        return __ne<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::Greater<int<Bits>> for int<Bits> {
    func Greater(operand: int<Bits>)->bool{
        return __gt<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::Less<int<Bits>> for int<Bits> {
    func Less(operand: int<Bits>)->bool{
        return __lt<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::GreaterOrEqual<int<Bits>> for int<Bits> {
    func GreaterOrEqual(operand: int<Bits>)->bool {
        return __ge<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::LessOrEqual<int<Bits>> for int<Bits> {
    func LessOrEqual(operand: int<Bits>)->bool {
        return __le<int<Bits>>(this, operand);
    }
}

template <Bits>
implement operator::Negative<int<Bits>> for int<Bits> {
    func Negative()->int<Bits> {
        var zero = this - this;
        return zero - this;
    }
}


func __tmp(){
    {
        var a0: int<8>;
        var a1: int<16>;
        var a2: int<32>;
        var a3: int<64>;
    }
    {
        var a0: uint<8>;
        var a1: uint<16>;
        var a2: uint<32>;
        var a3: uint<64>;
    }
}

