template <Bits>
implement Serializable for uint<Bits>{
    func tostr()->str{
        var zero = 0i64.cast<uint<Bits>>();
        var one = 1i64.cast<uint<Bits>>();
        var ten = 10i64.cast<uint<Bits>>();
        if (this == zero){
            return "0";
        }

        var temp = this;
        var inverse_re = "";
        while (temp != zero){
            inverse_re.append((temp % ten +'0'.cast<uint<Bits>>()).cast<char>());
            temp = temp / ten;
        }

        var re = str::create(inverse_re.size);
        var j = 0;
        while (j < re.size){
            re.darray[j] = inverse_re.darray[inverse_re.size-j-1];
            j = j + 1;
        }

        if (this > zero){
            return re;
        } else {
            return "-" + re;
        }
    }
}

template <Bits>
implement Serializable for int<Bits>{
    func tostr()->str{
        var zero = 0i64.cast<int<Bits>>();
        if (this >= zero) {
            return this.cast<uint<Bits>>().tostr();
        } else {
            return "-" + (-this).tostr();
        }
    }
}

implement Serializable for bool{
    func tostr()->str{
        if (this){
            return "true";
        } else {
            return "false";
        }
    }
}


/// TODO 输出位数, 需要重构
template <Bits>
implement Serializable for float<Bits>{
    func tostr()->str{
        var x = this;
        var n = 4;
        var rounder = 0.00005f32.cast<float<Bits>>();
        var zero = 0i64.cast<float<Bits>>();
        var one = 1i64.cast<float<Bits>>();
        var ten = 10i64.cast<float<Bits>>();
        x = x + rounder;
        // TODO
        // var re = "";
        var re = str::create(0);

        if (x < zero){
            re.append('-');
            x = zero-x;
        }

        var int_part = x.cast<int<64>>();
        re = re  + int_part.tostr();
        x = x - int_part.cast<float<Bits>>();

        if (x < one){
            re.append('.');
            while (n > 0){
                x = x * ten;
                int_part = x.cast<int<64>>();
                re.append((x.cast<int<64>>() + '0'.cast<int<64>>()).cast<char>());
                x = x - int_part.cast<float<Bits>>();
                n = n - 1;
            }
        }

        return re;
    }
}

template <Type_, Dim_>
implement Serializable for Array<Type_, Dim_>{
    func tostr()->str{
        var re = "[";
        for i in 0 to Dim_ {
            re = re + this[i].tostr() + ",";
        }
        re = re + "]";

        return re;
    }
}

implement Serializable for char {
    func tostr()->str{
        var re = str::create(1);
        re.darray[0] = this;
        return re;
    }
}
