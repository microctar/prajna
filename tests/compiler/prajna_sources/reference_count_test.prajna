
struct TestA {
    data: undef*;
    name: str;
}

// @disable_dynamic_dispatch
implement reference_count::ReferenceCountable for TestA {
    func initialize(){
        this.name = "undef";
        this.data = __cast<i64, undef*>(0);
        this.registerReferenceCount();
        // (this.name + " __initialize\n").print();
    }

    func registerReferenceCount(){
        bindings::registerReferenceCount(this.data);
        // (this.name + " registerReferenceCount\n").print();
    }

    func decrementReferenceCount(){
        // (this.name + " TestA destropy callback\n").print();
        bindings::decrementReferenceCount(this.data);

        var ref_count = bindings::getReferenceCount(this.data);
        // (this.name + " ref count: " + ref_count.tostr() + "\n").print();

        if (ref_count == 0 ){
            if (__cast<undef*, i64>(this.data) == 0) {
                bindings::free(this.data);
            }
            "free memory\n".print();
        }

    }

    func incrementReferenceCount(){
        // (this.name + " TestA __incrementReferenceCount callback\n").print();
        bindings::incrementReferenceCount(this.data);

        var ref_count = bindings::getReferenceCount(this.data);
        // (this.name + " ref count: " + ref_count.tostr() + "\n").print();
    }
}

implement TestA {
    @static
    func create(bytes: i64)->TestA{
        var self: TestA;
        self.data = bindings::malloc(bytes);
        "malloc memory\n".print();
        self.name = "create_self";

        self.registerReferenceCount();
        self.incrementReferenceCount();

        return self; // 调用 copy函数
        // 退出时会调用destropy 函数
    }
}

@test
func testMemoryManager(){
    var a : TestA;
    // var a1 = TestA::create(10); // 调用copy函数, 然后调用destroy函数
    // a1.name = "a1";
    // debug::assert(bindings::getReferenceCount(a1.data) == 1);

    // var a2 = a1; // 调用copy函数
    // a2.name = "a2";
    // debug::assert(bindings::getReferenceCount(a1.data) == 2);

    // {
    //     var sub_a0 = a1; // 变量拷贝, 调用copy函数
    //     sub_a0.name = "sub_a0";
    //     debug::assert(bindings::getReferenceCount(a1.data) == 3);

    //     TestA::create(100); // 调用destroy 函数
    // }

    // debug::assert(bindings::getReferenceCount(a1.data) == 2);
}

